/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */


function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { Message: peg$parseMessage },
      peg$startRuleFunction  = peg$parseMessage,

      peg$c0 = "WARNING: the admin queued the stack change for the player ",
      peg$c1 = peg$literalExpectation("WARNING: the admin queued the stack change for the player ", false),
      peg$c2 = " adding ",
      peg$c3 = peg$literalExpectation(" adding ", false),
      peg$c4 = " chips in the next hand.",
      peg$c5 = peg$literalExpectation(" chips in the next hand.", false),
      peg$c6 = function(player, value) { return { event: "ADMIN_UPDATED_STACK_ADD_QUEUED", player: player, value: value }; },
      peg$c7 = " removing ",
      peg$c8 = peg$literalExpectation(" removing ", false),
      peg$c9 = function(player, value) { return { event: "ADMIN_UPDATED_STACK_REMOVE_QUEUED", player: player, value: -value }; },
      peg$c10 = "The admin updated the player ",
      peg$c11 = peg$literalExpectation("The admin updated the player ", false),
      peg$c12 = " stack from ",
      peg$c13 = peg$literalExpectation(" stack from ", false),
      peg$c14 = " to ",
      peg$c15 = peg$literalExpectation(" to ", false),
      peg$c16 = ".",
      peg$c17 = peg$literalExpectation(".", false),
      peg$c18 = function(player, from, to) { return { event: "ADMIN_UPDATED_STACK", player: player, from: from, to: to }; },
      peg$c19 = " reseting to ",
      peg$c20 = peg$literalExpectation(" reseting to ", false),
      peg$c21 = function(player, value) { return { event: "ADMIN_UPDATED_STACK_RESET_QUEUED", player: player, value: value }; },
      peg$c22 = "The game's big blind was changed from ",
      peg$c23 = peg$literalExpectation("The game's big blind was changed from ", false),
      peg$c24 = function(from, to) { return { event: "BIG_BLIND_CHANGE", from: from, to: to }; },
      peg$c25 = "The game's small blind was changed from ",
      peg$c26 = peg$literalExpectation("The game's small blind was changed from ", false),
      peg$c27 = function(from, to) { return { event: "SMALL_BLIND_CHANGE", from: from, to: to }; },
      peg$c28 = "Dead Small Blind",
      peg$c29 = peg$literalExpectation("Dead Small Blind", false),
      peg$c30 = function() { return { event: "DEAD_SMALL_BLIND" }; },
      peg$c31 = "IMPORTANT: ",
      peg$c32 = peg$literalExpectation("IMPORTANT: ", false),
      peg$c33 = peg$anyExpectation(),
      peg$c34 = function(message) { return { event: "IMPORTANT_MESSAGE", message: message }; },
      peg$c35 = "The player ",
      peg$c36 = peg$literalExpectation("The player ", false),
      peg$c37 = " joined the game with a stack of ",
      peg$c38 = peg$literalExpectation(" joined the game with a stack of ", false),
      peg$c39 = function(player, value) { return { event: "JOIN", player: player, stack: value }; },
      peg$c40 = " requested a seat.",
      peg$c41 = peg$literalExpectation(" requested a seat.", false),
      peg$c42 = function(player) { return { event: "REQUEST", player: player }; },
      peg$c43 = "The admin ",
      peg$c44 = peg$literalExpectation("The admin ", false),
      peg$c45 = " rejected the seat request from the player ",
      peg$c46 = peg$literalExpectation(" rejected the seat request from the player ", false),
      peg$c47 = function(admin, player) { return { event: "REJECT_SEAT_REQUEST", player: player, admin: admin}; },
      peg$c48 = " canceled the seat request.",
      peg$c49 = peg$literalExpectation(" canceled the seat request.", false),
      peg$c50 = function(player) { return { event: "CANCEL_REQUEST", player: player }; },
      peg$c51 = " enqueued the removal of the player ",
      peg$c52 = peg$literalExpectation(" enqueued the removal of the player ", false),
      peg$c53 = function(admin, player) { return { event: "REMOVAL", player: player, admin: admin }; },
      peg$c54 = " stand up with the stack of ",
      peg$c55 = peg$literalExpectation(" stand up with the stack of ", false),
      peg$c56 = function(player, value) { return { event: "STAND", player: player, stack: value }; },
      peg$c57 = " sit back with the stack of ",
      peg$c58 = peg$literalExpectation(" sit back with the stack of ", false),
      peg$c59 = function(player, value) { return { event: "SIT", player: player, stack: value }; },
      peg$c60 = " quits the game with a stack of ",
      peg$c61 = peg$literalExpectation(" quits the game with a stack of ", false),
      peg$c62 = function(player, value) { return { event: "QUIT", player: player, stack: value }; },
      peg$c63 = "The admin approved the player ",
      peg$c64 = peg$literalExpectation("The admin approved the player ", false),
      peg$c65 = " participation with a stack of ",
      peg$c66 = peg$literalExpectation(" participation with a stack of ", false),
      peg$c67 = function(player, value) { return { event: "APPROVED", player: player, stack: value }; },
      peg$c68 = " changed the ID from ",
      peg$c69 = peg$literalExpectation(" changed the ID from ", false),
      peg$c70 = " because authenticated login.",
      peg$c71 = peg$literalExpectation(" because authenticated login.", false),
      peg$c72 = function(player, guest, auth) { return { event: "CHANGE_ID", player: player, guest: guest, auth: auth }; },
      peg$c73 = function(name, code) { return { name: name, code: code }; },
      peg$c74 = "Player stacks:",
      peg$c75 = peg$literalExpectation("Player stacks:", false),
      peg$c76 = function(stacks) { return { event: "STACKS", stacks: stacks }; },
      peg$c77 = " #",
      peg$c78 = peg$literalExpectation(" #", false),
      peg$c79 = " ",
      peg$c80 = peg$literalExpectation(" ", false),
      peg$c81 = " (",
      peg$c82 = peg$literalExpectation(" (", false),
      peg$c83 = ")",
      peg$c84 = peg$literalExpectation(")", false),
      peg$c85 = " |",
      peg$c86 = peg$literalExpectation(" |", false),
      peg$c87 = function(seat, player, stack) { return { player: player, seat: seat, stack: stack }; },
      peg$c88 = "Flop:",
      peg$c89 = peg$literalExpectation("Flop:", false),
      peg$c90 = "[",
      peg$c91 = peg$literalExpectation("[", false),
      peg$c92 = ", ",
      peg$c93 = peg$literalExpectation(", ", false),
      peg$c94 = "]",
      peg$c95 = peg$literalExpectation("]", false),
      peg$c96 = function(card1, card2, card3) { return { event: "FLOP", cards: [ card1, card2, card3 ] }; },
      peg$c97 = "Turn:",
      peg$c98 = peg$literalExpectation("Turn:", false),
      peg$c99 = " [",
      peg$c100 = peg$literalExpectation(" [", false),
      peg$c101 = function(card1, card2, card3, card4) { return { event: "TURN", cards: [ card1, card2, card3, card4 ] }; },
      peg$c102 = "River:",
      peg$c103 = peg$literalExpectation("River:", false),
      peg$c104 = function(card1, card2, card3, card4, card5) { return { event: "RIVER", cards: [ card1, card2, card3, card4, card5 ] }; },
      peg$c105 = function(ordinal, suit) { return { ordinal: ordinal, suit: suit }; },
      peg$c106 = "-- starting hand #",
      peg$c107 = peg$literalExpectation("-- starting hand #", false),
      peg$c108 = "(No Limit Texas Hold'em) (dealer: ",
      peg$c109 = peg$literalExpectation("(No Limit Texas Hold'em) (dealer: ", false),
      peg$c110 = ") --",
      peg$c111 = peg$literalExpectation(") --", false),
      peg$c112 = function(number, dealer) { return { event: "HAND_START", dealer: dealer, number: number }; },
      peg$c113 = "(No Limit Texas Hold'em) (dead button) --",
      peg$c114 = peg$literalExpectation("(No Limit Texas Hold'em) (dead button) --", false),
      peg$c115 = function(number) { return { event: "HAND_START", dealer: null, number: number }; },
      peg$c116 = "-- ending hand #",
      peg$c117 = peg$literalExpectation("-- ending hand #", false),
      peg$c118 = " --",
      peg$c119 = peg$literalExpectation(" --", false),
      peg$c120 = function(number) { return { event: "HAND_END", number: number }; },
      peg$c121 = "Your hand is ",
      peg$c122 = peg$literalExpectation("Your hand is ", false),
      peg$c123 = function(card1, card2) { return { event: "YOUR_HAND", card1: card1, card2: card2 }; },
      peg$c124 = " posts a small blind of ",
      peg$c125 = peg$literalExpectation(" posts a small blind of ", false),
      peg$c126 = /^[ ]/,
      peg$c127 = peg$classExpectation([" "], false, false),
      peg$c128 = "and go all in",
      peg$c129 = peg$literalExpectation("and go all in", false),
      peg$c130 = function(player, value) { return { event: "POST_SMALL_BLIND", player: player, value: value, allIn: false }; },
      peg$c131 = function(player, value) { return { event: "POST_SMALL_BLIND", player: player, value: value, allIn: true }; },
      peg$c132 = " posts a big blind of ",
      peg$c133 = peg$literalExpectation(" posts a big blind of ", false),
      peg$c134 = function(player, value) { return { event: "POST_BIG_BLIND", player: player, value: value, allIn: false }; },
      peg$c135 = function(player, value) { return { event: "POST_BIG_BLIND", player: player, value: value, allIn: true }; },
      peg$c136 = " folds",
      peg$c137 = peg$literalExpectation(" folds", false),
      peg$c138 = function(player) { return { event: "FOLD", player: player }; },
      peg$c139 = " calls ",
      peg$c140 = peg$literalExpectation(" calls ", false),
      peg$c141 = " and go all in",
      peg$c142 = peg$literalExpectation(" and go all in", false),
      peg$c143 = function(player, value) { return { event: "CALL", player: player, value: value, allIn: false }; },
      peg$c144 = function(player, value) { return { event: "CALL", player: player, value: value, allIn: true }; },
      peg$c145 = " checks",
      peg$c146 = peg$literalExpectation(" checks", false),
      peg$c147 = function(player) { return { event: "CHECK", player: player }; },
      peg$c148 = " bets ",
      peg$c149 = peg$literalExpectation(" bets ", false),
      peg$c150 = function(player, value) { return { event: "BET", player: player, value: value, allIn: false }; },
      peg$c151 = function(player, value) { return { event: "BET", player: player, value: value, allIn: true }; },
      peg$c152 = " raises to ",
      peg$c153 = peg$literalExpectation(" raises to ", false),
      peg$c154 = function(player, value) { return { event: "RAISE", player: player, value: value, allIn: false }; },
      peg$c155 = function(player, value) { return { event: "RAISE", player: player, value: value, allIn: true }; },
      peg$c156 = " shows a ",
      peg$c157 = peg$literalExpectation(" shows a ", false),
      peg$c158 = function(player, card1, card2) { return { event: "SHOW", player: player, card1: card1, card2: card2 }; },
      peg$c159 = "Uncalled bet of ",
      peg$c160 = peg$literalExpectation("Uncalled bet of ", false),
      peg$c161 = " returned to ",
      peg$c162 = peg$literalExpectation(" returned to ", false),
      peg$c163 = function(value, player) { return { event: "UNCALLED_BET_RETURNED", player: player, value: value }; },
      peg$c164 = " collected ",
      peg$c165 = peg$literalExpectation(" collected ", false),
      peg$c166 = " from pot",
      peg$c167 = peg$literalExpectation(" from pot", false),
      peg$c168 = " with",
      peg$c169 = peg$literalExpectation(" with", false),
      peg$c170 = function(player, value) { return { event: "WIN", player: player, value: value, hand: null }; },
      peg$c171 = " from pot with ",
      peg$c172 = peg$literalExpectation(" from pot with ", false),
      peg$c173 = function(player, value, handCombination) { return { event: "WIN", player: player, value: value, hand: handCombination }; },
      peg$c174 = " (combination: ",
      peg$c175 = peg$literalExpectation(" (combination: ", false),
      peg$c176 = function(handType, card1, card2, card3, card4, card5) { return { ...handType, cards: [ card1, card2, card3, card4, card5 ] }; },
      peg$c177 = "Royal Flush, ",
      peg$c178 = peg$literalExpectation("Royal Flush, ", false),
      peg$c179 = " High",
      peg$c180 = peg$literalExpectation(" High", false),
      peg$c181 = function(highCard, suit) { return { type: "ROYAL_FLUSH", suit: suit, highCard: highCard }; },
      peg$c182 = "Straight Flush, ",
      peg$c183 = peg$literalExpectation("Straight Flush, ", false),
      peg$c184 = function(highCard, suit) { return { type: "STRAIGHT_FLUSH", suit: suit, highCard: highCard }; },
      peg$c185 = "Four of a Kind, ",
      peg$c186 = peg$literalExpectation("Four of a Kind, ", false),
      peg$c187 = function(ordinal) { return { type: "FOUR_OF_A_KIND", four: ordinal }; },
      peg$c188 = "Flush, ",
      peg$c189 = peg$literalExpectation("Flush, ", false),
      peg$c190 = function(ordinal, suit) { return { type: "FLUSH", suit: suit, highCard: ordinal }; },
      peg$c191 = "Straight, ",
      peg$c192 = peg$literalExpectation("Straight, ", false),
      peg$c193 = function(ordinal) { return { type: "STRAIGHT", highCard: ordinal }; },
      peg$c194 = "Full House, ",
      peg$c195 = peg$literalExpectation("Full House, ", false),
      peg$c196 = " over ",
      peg$c197 = peg$literalExpectation(" over ", false),
      peg$c198 = function(three, two) { return { type: "FULL_HOUSE", three: three, two: two }; },
      peg$c199 = "Three of a Kind, ",
      peg$c200 = peg$literalExpectation("Three of a Kind, ", false),
      peg$c201 = function(ordinal) { return { type: "THREE_OF_A_KIND", ordinal: ordinal }; },
      peg$c202 = "Two Pair, ",
      peg$c203 = peg$literalExpectation("Two Pair, ", false),
      peg$c204 = " & ",
      peg$c205 = peg$literalExpectation(" & ", false),
      peg$c206 = function(ordinal1, ordinal2) { return { type: "TWO_PAIR", ordinal1: ordinal1, ordinal2: ordinal2 }; },
      peg$c207 = "Pair, ",
      peg$c208 = peg$literalExpectation("Pair, ", false),
      peg$c209 = function(ordinal) { return { type: "ONE_PAIR", ordinal: ordinal }; },
      peg$c210 = function(ordinal) { return { type: "HIGH_CARD", highCard: ordinal }; },
      peg$c211 = "'s",
      peg$c212 = peg$literalExpectation("'s", false),
      peg$c213 = function(ordinal) { return ordinal; },
      peg$c214 = "2",
      peg$c215 = peg$literalExpectation("2", false),
      peg$c216 = "3",
      peg$c217 = peg$literalExpectation("3", false),
      peg$c218 = "4",
      peg$c219 = peg$literalExpectation("4", false),
      peg$c220 = "5",
      peg$c221 = peg$literalExpectation("5", false),
      peg$c222 = "6",
      peg$c223 = peg$literalExpectation("6", false),
      peg$c224 = "7",
      peg$c225 = peg$literalExpectation("7", false),
      peg$c226 = "8",
      peg$c227 = peg$literalExpectation("8", false),
      peg$c228 = "9",
      peg$c229 = peg$literalExpectation("9", false),
      peg$c230 = "10",
      peg$c231 = peg$literalExpectation("10", false),
      peg$c232 = "J",
      peg$c233 = peg$literalExpectation("J", false),
      peg$c234 = "Q",
      peg$c235 = peg$literalExpectation("Q", false),
      peg$c236 = "K",
      peg$c237 = peg$literalExpectation("K", false),
      peg$c238 = "A",
      peg$c239 = peg$literalExpectation("A", false),
      peg$c240 = "\u2663",
      peg$c241 = peg$literalExpectation("\u2663", false),
      peg$c242 = "\u2665",
      peg$c243 = peg$literalExpectation("\u2665", false),
      peg$c244 = "\u2660",
      peg$c245 = peg$literalExpectation("\u2660", false),
      peg$c246 = "\u2666",
      peg$c247 = peg$literalExpectation("\u2666", false),
      peg$c248 = function(suit) { return suit; },
      peg$c249 = "c",
      peg$c250 = peg$literalExpectation("c", false),
      peg$c251 = function() { return "♣"; },
      peg$c252 = "h",
      peg$c253 = peg$literalExpectation("h", false),
      peg$c254 = function() { return "♥"; },
      peg$c255 = "s",
      peg$c256 = peg$literalExpectation("s", false),
      peg$c257 = function() { return "♠"; },
      peg$c258 = "d",
      peg$c259 = peg$literalExpectation("d", false),
      peg$c260 = function() { return "♦"; },
      peg$c261 = function(val) { return Number(val); },
      peg$c262 = /^[0-9]/,
      peg$c263 = peg$classExpectation([["0", "9"]], false, false),
      peg$c264 = " @ ",
      peg$c265 = peg$literalExpectation(" @ ", false),
      peg$c266 = "\"",
      peg$c267 = peg$literalExpectation("\"", false),

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseMessage() {
    var s0;

    s0 = peg$parseJoin();
    if (s0 === peg$FAILED) {
      s0 = peg$parseRequest();
      if (s0 === peg$FAILED) {
        s0 = peg$parseQuit();
        if (s0 === peg$FAILED) {
          s0 = peg$parseApproved();
          if (s0 === peg$FAILED) {
            s0 = peg$parseChangeId();
            if (s0 === peg$FAILED) {
              s0 = peg$parseRemovePlayer();
              if (s0 === peg$FAILED) {
                s0 = peg$parseCancelRequest();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseReject();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseStand();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseSit();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseBigBlindChange();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseSmallBlindChange();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseDeadSmallBlind();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseImportant();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseStacks();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseFlop();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseTurn();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parseRiver();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parseStartingHand();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseEndingHand();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parseYourHand();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parsePostSmallBlind();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parsePostSmallBlindAllIn();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parsePostBigBlind();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parsePostBigBlindAllIn();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parseFold();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parseCall();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parseCheck();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parseBet();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parseRaise();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parseBetAllIn();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parseRaiseAllIn();
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$parseCallAllIn();
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$parseShow();
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$parseUncalled();
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$parseCollect();
                                                                          if (s0 === peg$FAILED) {
                                                                            s0 = peg$parseCollectWin();
                                                                            if (s0 === peg$FAILED) {
                                                                              s0 = peg$parseAdminStackQueueAdd();
                                                                              if (s0 === peg$FAILED) {
                                                                                s0 = peg$parseAdminStackQueueRemove();
                                                                                if (s0 === peg$FAILED) {
                                                                                  s0 = peg$parseAdminStackUpdate();
                                                                                  if (s0 === peg$FAILED) {
                                                                                    s0 = peg$parseAdminStackReset();
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseAdminStackQueueAdd() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 58) === peg$c0) {
      s1 = peg$c0;
      peg$currPos += 58;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c1); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsePlayer();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c2) {
          s3 = peg$c2;
          peg$currPos += 8;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c3); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseValue();
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 24) === peg$c4) {
              s5 = peg$c4;
              peg$currPos += 24;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c5); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c6(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAdminStackQueueRemove() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 58) === peg$c0) {
      s1 = peg$c0;
      peg$currPos += 58;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c1); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsePlayer();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c7) {
          s3 = peg$c7;
          peg$currPos += 10;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c8); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseValue();
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 24) === peg$c4) {
              s5 = peg$c4;
              peg$currPos += 24;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c5); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c9(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAdminStackUpdate() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 29) === peg$c10) {
      s1 = peg$c10;
      peg$currPos += 29;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c11); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsePlayer();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 12) === peg$c12) {
          s3 = peg$c12;
          peg$currPos += 12;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c13); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseValue();
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c14) {
              s5 = peg$c14;
              peg$currPos += 4;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c15); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseValue();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                  s7 = peg$c16;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c17); }
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c18(s2, s4, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAdminStackReset() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 58) === peg$c0) {
      s1 = peg$c0;
      peg$currPos += 58;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c1); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsePlayer();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 13) === peg$c19) {
          s3 = peg$c19;
          peg$currPos += 13;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c20); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseValue();
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 24) === peg$c4) {
              s5 = peg$c4;
              peg$currPos += 24;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c5); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c21(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBigBlindChange() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 38) === peg$c22) {
      s1 = peg$c22;
      peg$currPos += 38;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c23); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseValue();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c14) {
          s3 = peg$c14;
          peg$currPos += 4;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c15); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseValue();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s5 = peg$c16;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c17); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c24(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSmallBlindChange() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 40) === peg$c25) {
      s1 = peg$c25;
      peg$currPos += 40;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c26); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseValue();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c14) {
          s3 = peg$c14;
          peg$currPos += 4;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c15); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseValue();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s5 = peg$c16;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c17); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c27(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDeadSmallBlind() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 16) === peg$c28) {
      s1 = peg$c28;
      peg$currPos += 16;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c29); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c30();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseImportant() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c31) {
      s1 = peg$c31;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c32); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      if (input.length > peg$currPos) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c33); }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        if (input.length > peg$currPos) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c33); }
        }
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c34(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseJoin() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c35) {
      s1 = peg$c35;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c36); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsePlayer();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 33) === peg$c37) {
          s3 = peg$c37;
          peg$currPos += 33;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c38); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseValue();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s5 = peg$c16;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c17); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c39(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRequest() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c35) {
      s1 = peg$c35;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c36); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsePlayer();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 18) === peg$c40) {
          s3 = peg$c40;
          peg$currPos += 18;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c41); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c42(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseReject() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c43) {
      s1 = peg$c43;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c44); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsePlayer();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 43) === peg$c45) {
          s3 = peg$c45;
          peg$currPos += 43;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c46); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsePlayer();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s5 = peg$c16;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c17); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c47(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCancelRequest() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c35) {
      s1 = peg$c35;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c36); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsePlayer();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 27) === peg$c48) {
          s3 = peg$c48;
          peg$currPos += 27;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c49); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c50(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRemovePlayer() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c43) {
      s1 = peg$c43;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c44); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsePlayer();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 36) === peg$c51) {
          s3 = peg$c51;
          peg$currPos += 36;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c52); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsePlayer();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s5 = peg$c16;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c17); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c53(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStand() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c35) {
      s1 = peg$c35;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c36); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsePlayer();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 28) === peg$c54) {
          s3 = peg$c54;
          peg$currPos += 28;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c55); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseValue();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s5 = peg$c16;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c17); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c56(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSit() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c35) {
      s1 = peg$c35;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c36); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsePlayer();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 28) === peg$c57) {
          s3 = peg$c57;
          peg$currPos += 28;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c58); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseValue();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s5 = peg$c16;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c17); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c59(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseQuit() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c35) {
      s1 = peg$c35;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c36); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsePlayer();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 32) === peg$c60) {
          s3 = peg$c60;
          peg$currPos += 32;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c61); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseValue();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s5 = peg$c16;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c17); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c62(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseApproved() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 30) === peg$c63) {
      s1 = peg$c63;
      peg$currPos += 30;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c64); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsePlayer();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 31) === peg$c65) {
          s3 = peg$c65;
          peg$currPos += 31;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c66); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseValue();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s5 = peg$c16;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c17); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c67(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseChangeId() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c35) {
      s1 = peg$c35;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c36); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsePlayer();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 21) === peg$c68) {
          s3 = peg$c68;
          peg$currPos += 21;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c69); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseID();
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c14) {
              s5 = peg$c14;
              peg$currPos += 4;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c15); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseID();
              if (s6 !== peg$FAILED) {
                if (input.substr(peg$currPos, 29) === peg$c70) {
                  s7 = peg$c70;
                  peg$currPos += 29;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c71); }
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c72(s2, s4, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePlayer() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseQUOTE();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseName();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseNAME_DELIMITER();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseCode();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseQUOTE();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c73(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStacks() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 14) === peg$c74) {
      s1 = peg$c74;
      peg$currPos += 14;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c75); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseStack();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseStack();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c76(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStack() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c77) {
      s1 = peg$c77;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c78); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseValue();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 32) {
          s3 = peg$c79;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c80); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsePlayer();
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c81) {
              s5 = peg$c81;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c82); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseValue();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s7 = peg$c83;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c84); }
                }
                if (s7 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c85) {
                    s8 = peg$c85;
                    peg$currPos += 2;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c86); }
                  }
                  if (s8 === peg$FAILED) {
                    s8 = null;
                  }
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c87(s2, s4, s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFlop() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c88) {
      s1 = peg$c88;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c89); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s3 = peg$c79;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c80); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (input.charCodeAt(peg$currPos) === 32) {
          s3 = peg$c79;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c80); }
        }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 91) {
          s3 = peg$c90;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c91); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseCard();
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c92) {
              s5 = peg$c92;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c93); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseCard();
              if (s6 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c92) {
                  s7 = peg$c92;
                  peg$currPos += 2;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c93); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseCard();
                  if (s8 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 93) {
                      s9 = peg$c94;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c95); }
                    }
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c96(s4, s6, s8);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTurn() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c97) {
      s1 = peg$c97;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c98); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s3 = peg$c79;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c80); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (input.charCodeAt(peg$currPos) === 32) {
          s3 = peg$c79;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c80); }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCard();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c92) {
            s4 = peg$c92;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c93); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCard();
            if (s5 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c92) {
                s6 = peg$c92;
                peg$currPos += 2;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c93); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseCard();
                if (s7 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c99) {
                    s8 = peg$c99;
                    peg$currPos += 2;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c100); }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseCard();
                    if (s9 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 93) {
                        s10 = peg$c94;
                        peg$currPos++;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c95); }
                      }
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c101(s3, s5, s7, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRiver() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c102) {
      s1 = peg$c102;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c103); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s3 = peg$c79;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c80); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (input.charCodeAt(peg$currPos) === 32) {
          s3 = peg$c79;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c80); }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCard();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c92) {
            s4 = peg$c92;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c93); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCard();
            if (s5 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c92) {
                s6 = peg$c92;
                peg$currPos += 2;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c93); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseCard();
                if (s7 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c92) {
                    s8 = peg$c92;
                    peg$currPos += 2;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c93); }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseCard();
                    if (s9 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c99) {
                        s10 = peg$c99;
                        peg$currPos += 2;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c100); }
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parseCard();
                        if (s11 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 93) {
                            s12 = peg$c94;
                            peg$currPos++;
                          } else {
                            s12 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c95); }
                          }
                          if (s12 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c104(s3, s5, s7, s9, s11);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCard() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseOrdinal();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSuit();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c105(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStartingHand() {
    var s0;

    s0 = peg$parseStartingHandDealer();
    if (s0 === peg$FAILED) {
      s0 = peg$parseStartingHandDeadButton();
    }

    return s0;
  }

  function peg$parseStartingHandDealer() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 18) === peg$c106) {
      s1 = peg$c106;
      peg$currPos += 18;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c107); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseValue();
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (input.charCodeAt(peg$currPos) === 32) {
          s4 = peg$c79;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c80); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (input.charCodeAt(peg$currPos) === 32) {
              s4 = peg$c79;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c80); }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 34) === peg$c108) {
            s4 = peg$c108;
            peg$currPos += 34;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c109); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsePlayer();
            if (s5 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c110) {
                s6 = peg$c110;
                peg$currPos += 4;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c111); }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c112(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStartingHandDeadButton() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 18) === peg$c106) {
      s1 = peg$c106;
      peg$currPos += 18;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c107); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseValue();
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (input.charCodeAt(peg$currPos) === 32) {
          s4 = peg$c79;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c80); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (input.charCodeAt(peg$currPos) === 32) {
              s4 = peg$c79;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c80); }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 41) === peg$c113) {
            s4 = peg$c113;
            peg$currPos += 41;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c114); }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c115(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEndingHand() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 16) === peg$c116) {
      s1 = peg$c116;
      peg$currPos += 16;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c117); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseValue();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c118) {
          s3 = peg$c118;
          peg$currPos += 3;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c119); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c120(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseYourHand() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 13) === peg$c121) {
      s1 = peg$c121;
      peg$currPos += 13;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c122); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseCard();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c92) {
          s3 = peg$c92;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c93); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseCard();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c123(s2, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePostSmallBlind() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsePlayer();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 24) === peg$c124) {
        s2 = peg$c124;
        peg$currPos += 24;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c125); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseValue();
        if (s3 !== peg$FAILED) {
          s4 = [];
          if (peg$c126.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c127); }
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (peg$c126.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c127); }
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            peg$silentFails++;
            if (input.substr(peg$currPos, 13) === peg$c128) {
              s6 = peg$c128;
              peg$currPos += 13;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c129); }
            }
            peg$silentFails--;
            if (s6 === peg$FAILED) {
              s5 = void 0;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              if (peg$c126.test(input.charAt(peg$currPos))) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c127); }
              }
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                if (peg$c126.test(input.charAt(peg$currPos))) {
                  s7 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c127); }
                }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c130(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePostSmallBlindAllIn() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsePlayer();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 24) === peg$c124) {
        s2 = peg$c124;
        peg$currPos += 24;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c125); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseValue();
        if (s3 !== peg$FAILED) {
          s4 = [];
          if (peg$c126.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c127); }
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (peg$c126.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c127); }
            }
          }
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 13) === peg$c128) {
              s5 = peg$c128;
              peg$currPos += 13;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c129); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              if (peg$c126.test(input.charAt(peg$currPos))) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c127); }
              }
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                if (peg$c126.test(input.charAt(peg$currPos))) {
                  s7 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c127); }
                }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c131(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePostBigBlind() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsePlayer();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 22) === peg$c132) {
        s2 = peg$c132;
        peg$currPos += 22;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c133); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseValue();
        if (s3 !== peg$FAILED) {
          s4 = [];
          if (peg$c126.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c127); }
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (peg$c126.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c127); }
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            peg$silentFails++;
            if (input.substr(peg$currPos, 13) === peg$c128) {
              s6 = peg$c128;
              peg$currPos += 13;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c129); }
            }
            peg$silentFails--;
            if (s6 === peg$FAILED) {
              s5 = void 0;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              if (peg$c126.test(input.charAt(peg$currPos))) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c127); }
              }
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                if (peg$c126.test(input.charAt(peg$currPos))) {
                  s7 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c127); }
                }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c134(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePostBigBlindAllIn() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsePlayer();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 22) === peg$c132) {
        s2 = peg$c132;
        peg$currPos += 22;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c133); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseValue();
        if (s3 !== peg$FAILED) {
          s4 = [];
          if (peg$c126.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c127); }
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (peg$c126.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c127); }
            }
          }
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 13) === peg$c128) {
              s5 = peg$c128;
              peg$currPos += 13;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c129); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              if (peg$c126.test(input.charAt(peg$currPos))) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c127); }
              }
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                if (peg$c126.test(input.charAt(peg$currPos))) {
                  s7 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c127); }
                }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c135(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFold() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsePlayer();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c136) {
        s2 = peg$c136;
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c137); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c138(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCall() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsePlayer();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c139) {
        s2 = peg$c139;
        peg$currPos += 7;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c140); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseValue();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 14) === peg$c141) {
            s5 = peg$c141;
            peg$currPos += 14;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c142); }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c143(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCallAllIn() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsePlayer();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c139) {
        s2 = peg$c139;
        peg$currPos += 7;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c140); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseValue();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 14) === peg$c141) {
            s4 = peg$c141;
            peg$currPos += 14;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c142); }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c144(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCheck() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsePlayer();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c145) {
        s2 = peg$c145;
        peg$currPos += 7;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c146); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c147(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBet() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsePlayer();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c148) {
        s2 = peg$c148;
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c149); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseValue();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 14) === peg$c141) {
            s5 = peg$c141;
            peg$currPos += 14;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c142); }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c150(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBetAllIn() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsePlayer();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c148) {
        s2 = peg$c148;
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c149); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseValue();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 14) === peg$c141) {
            s4 = peg$c141;
            peg$currPos += 14;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c142); }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c151(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRaise() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsePlayer();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 11) === peg$c152) {
        s2 = peg$c152;
        peg$currPos += 11;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c153); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseValue();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 14) === peg$c141) {
            s5 = peg$c141;
            peg$currPos += 14;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c142); }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c154(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRaiseAllIn() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsePlayer();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 11) === peg$c152) {
        s2 = peg$c152;
        peg$currPos += 11;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c153); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseValue();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 14) === peg$c141) {
            s4 = peg$c141;
            peg$currPos += 14;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c142); }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c155(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseShow() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parsePlayer();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c156) {
        s2 = peg$c156;
        peg$currPos += 9;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c157); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCard();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c92) {
            s4 = peg$c92;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c93); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCard();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s6 = peg$c16;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c17); }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c158(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUncalled() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 16) === peg$c159) {
      s1 = peg$c159;
      peg$currPos += 16;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c160); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseValue();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 13) === peg$c161) {
          s3 = peg$c161;
          peg$currPos += 13;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c162); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsePlayer();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c163(s2, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCollect() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parsePlayer();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 11) === peg$c164) {
        s2 = peg$c164;
        peg$currPos += 11;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c165); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseValue();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 9) === peg$c166) {
            s4 = peg$c166;
            peg$currPos += 9;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c167); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            peg$silentFails++;
            if (input.substr(peg$currPos, 5) === peg$c168) {
              s6 = peg$c168;
              peg$currPos += 5;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c169); }
            }
            peg$silentFails--;
            if (s6 === peg$FAILED) {
              s5 = void 0;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c170(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCollectWin() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsePlayer();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 11) === peg$c164) {
        s2 = peg$c164;
        peg$currPos += 11;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c165); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseValue();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 15) === peg$c171) {
            s4 = peg$c171;
            peg$currPos += 15;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c172); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseHandCombination();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c173(s1, s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHandCombination() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = peg$parseHandType();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 15) === peg$c174) {
        s2 = peg$c174;
        peg$currPos += 15;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c175); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCard();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c92) {
            s4 = peg$c92;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c93); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCard();
            if (s5 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c92) {
                s6 = peg$c92;
                peg$currPos += 2;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c93); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseCard();
                if (s7 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c92) {
                    s8 = peg$c92;
                    peg$currPos += 2;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c93); }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseCard();
                    if (s9 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c92) {
                        s10 = peg$c92;
                        peg$currPos += 2;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c93); }
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parseCard();
                        if (s11 !== peg$FAILED) {
                          s12 = [];
                          s13 = peg$currPos;
                          if (input.substr(peg$currPos, 2) === peg$c92) {
                            s14 = peg$c92;
                            peg$currPos += 2;
                          } else {
                            s14 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c93); }
                          }
                          if (s14 !== peg$FAILED) {
                            s15 = peg$parseCard();
                            if (s15 !== peg$FAILED) {
                              s14 = [s14, s15];
                              s13 = s14;
                            } else {
                              peg$currPos = s13;
                              s13 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s13;
                            s13 = peg$FAILED;
                          }
                          while (s13 !== peg$FAILED) {
                            s12.push(s13);
                            s13 = peg$currPos;
                            if (input.substr(peg$currPos, 2) === peg$c92) {
                              s14 = peg$c92;
                              peg$currPos += 2;
                            } else {
                              s14 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c93); }
                            }
                            if (s14 !== peg$FAILED) {
                              s15 = peg$parseCard();
                              if (s15 !== peg$FAILED) {
                                s14 = [s14, s15];
                                s13 = s14;
                              } else {
                                peg$currPos = s13;
                                s13 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s13;
                              s13 = peg$FAILED;
                            }
                          }
                          if (s12 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 41) {
                              s13 = peg$c83;
                              peg$currPos++;
                            } else {
                              s13 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c84); }
                            }
                            if (s13 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c176(s1, s3, s5, s7, s9, s11);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHandType() {
    var s0;

    s0 = peg$parseRoyalFlush();
    if (s0 === peg$FAILED) {
      s0 = peg$parseStraightFlush();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFourOfAKind();
        if (s0 === peg$FAILED) {
          s0 = peg$parseFullHouse();
          if (s0 === peg$FAILED) {
            s0 = peg$parseFlush();
            if (s0 === peg$FAILED) {
              s0 = peg$parseStraight();
              if (s0 === peg$FAILED) {
                s0 = peg$parseThreeOfAKind();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseTwoPair();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseOnePair();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseHighCard();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseRoyalFlush() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 13) === peg$c177) {
      s1 = peg$c177;
      peg$currPos += 13;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c178); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOrdinal();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSuitCharacter();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c179) {
            s4 = peg$c179;
            peg$currPos += 5;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c180); }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c181(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStraightFlush() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 16) === peg$c182) {
      s1 = peg$c182;
      peg$currPos += 16;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c183); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOrdinal();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSuitCharacter();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c179) {
            s4 = peg$c179;
            peg$currPos += 5;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c180); }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c184(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFourOfAKind() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 16) === peg$c185) {
      s1 = peg$c185;
      peg$currPos += 16;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c186); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOrdinals();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c187(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFlush() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c188) {
      s1 = peg$c188;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c189); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOrdinal();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSuitCharacter();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c179) {
            s4 = peg$c179;
            peg$currPos += 5;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c180); }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c190(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStraight() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c191) {
      s1 = peg$c191;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c192); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOrdinal();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c179) {
          s3 = peg$c179;
          peg$currPos += 5;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c180); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c193(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFullHouse() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12) === peg$c194) {
      s1 = peg$c194;
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c195); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOrdinals();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c196) {
          s3 = peg$c196;
          peg$currPos += 6;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c197); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseOrdinals();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c198(s2, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseThreeOfAKind() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 17) === peg$c199) {
      s1 = peg$c199;
      peg$currPos += 17;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c200); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOrdinals();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c201(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTwoPair() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c202) {
      s1 = peg$c202;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c203); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOrdinals();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c204) {
          s3 = peg$c204;
          peg$currPos += 3;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c205); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseOrdinals();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c206(s2, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOnePair() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c207) {
      s1 = peg$c207;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c208); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOrdinals();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c209(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHighCard() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseOrdinal();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c179) {
        s2 = peg$c179;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c180); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c210(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOrdinals() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseOrdinal();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c211) {
        s2 = peg$c211;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c212); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c213(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOrdinal() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 50) {
      s0 = peg$c214;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c215); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 51) {
        s0 = peg$c216;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c217); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 52) {
          s0 = peg$c218;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c219); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 53) {
            s0 = peg$c220;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c221); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 54) {
              s0 = peg$c222;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c223); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 55) {
                s0 = peg$c224;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c225); }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 56) {
                  s0 = peg$c226;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c227); }
                }
                if (s0 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 57) {
                    s0 = peg$c228;
                    peg$currPos++;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c229); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c230) {
                      s0 = peg$c230;
                      peg$currPos += 2;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c231); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 74) {
                        s0 = peg$c232;
                        peg$currPos++;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c233); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 81) {
                          s0 = peg$c234;
                          peg$currPos++;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c235); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 75) {
                            s0 = peg$c236;
                            peg$currPos++;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c237); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 65) {
                              s0 = peg$c238;
                              peg$currPos++;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c239); }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseSuit() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 9827) {
      s0 = peg$c240;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c241); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 9829) {
        s0 = peg$c242;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c243); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 9824) {
          s0 = peg$c244;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c245); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 9830) {
            s0 = peg$c246;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c247); }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseSuitCharacter() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseDiamondCharacter();
    if (s1 === peg$FAILED) {
      s1 = peg$parseHeartCharacter();
      if (s1 === peg$FAILED) {
        s1 = peg$parseSpadeCharacter();
        if (s1 === peg$FAILED) {
          s1 = peg$parseClubCharacter();
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c248(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseClubCharacter() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 99) {
      s1 = peg$c249;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c250); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c251();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseHeartCharacter() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 104) {
      s1 = peg$c252;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c253); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c254();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSpadeCharacter() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 115) {
      s1 = peg$c255;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c256); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c257();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDiamondCharacter() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 100) {
      s1 = peg$c258;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c259); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c260();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseValue() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseValueMatch();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c261(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseValueMatch() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c262.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c263); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c262.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c263); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseName() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$currPos;
    peg$silentFails++;
    s4 = peg$parseNAME_DELIMITER();
    peg$silentFails--;
    if (s4 === peg$FAILED) {
      s3 = void 0;
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c33); }
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseNAME_DELIMITER();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = void 0;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c33); }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseCode() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$currPos;
    peg$silentFails++;
    s4 = peg$parseQUOTE();
    peg$silentFails--;
    if (s4 === peg$FAILED) {
      s3 = void 0;
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c33); }
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseQUOTE();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = void 0;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c33); }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseID() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$currPos;
    peg$silentFails++;
    s4 = [];
    if (peg$c126.test(input.charAt(peg$currPos))) {
      s5 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s5 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c127); }
    }
    if (s5 !== peg$FAILED) {
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        if (peg$c126.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c127); }
        }
      }
    } else {
      s4 = peg$FAILED;
    }
    peg$silentFails--;
    if (s4 === peg$FAILED) {
      s3 = void 0;
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c33); }
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = [];
        if (peg$c126.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c127); }
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (peg$c126.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c127); }
            }
          }
        } else {
          s4 = peg$FAILED;
        }
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = void 0;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c33); }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseNAME_DELIMITER() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c264) {
      s0 = peg$c264;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c265); }
    }

    return s0;
  }

  function peg$parseQUOTE() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 34) {
      s0 = peg$c266;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c267); }
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

/**module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};*/

const parser = { 
	SyntaxError: peg$SyntaxError,
	parse:       peg$parse
};

export default parser;
